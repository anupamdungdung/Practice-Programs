import java.util.*;
public class assemblyline_scheduling {
    static int min(int a, int b) {
        return a < b ? a : b;
    }

    static void assembly(int a[][], int t[][], int e[], int x[], int n) {
        int t1[] = new int[n];
        int t2[] = new int[n];
        int l1[] = new int[n];
        int l2[] = new int[n];
        int i;int minimum_cost=0,last=0;
        t1[0] = e[0] + a[0][0];
        t2[0] = e[1] + a[1][0];

        for (i = 1; i < n; i++) {
           /*t1[i] = min(t1[i - 1] + a[0][i], t2[i - 1] + t[1][i] + a[0][i]);
            t2[i] = min(t1[i - 1] + t[0][i] + a[1][i], t2[i - 1] + a[1][i]);
        */
        if(t1[i-1]+a[0][i]<t2[i-1]+t[1][i]+a[0][i])
        {
            t1[i]=t1[i-1]+a[0][i];
            l1[i]=1;
        }
        else
        {
            t1[i]=t2[i-1]+t[1][i]+a[0][i];
            l1[i]=2;
        }
        if(t1[i - 1] + t[0][i] + a[1][i]<t2[i - 1] + a[1][i])
        {
            t2[i]=t1[i - 1] + t[0][i] + a[1][i];
            l2[i]=1;
        }
        else
        {
            t2[i]=t2[i - 1] + a[1][i];
            l2[i]=2;
        }
        if(t1[n-1]+x[0]<t2[n-1]+x[1])
        {
            minimum_cost=t1[n-1]+x[0];
            last=1;
        }
        else
        {
            minimum_cost=t2[n-1]+x[1];
            last=2;
        }
        }
        System.out.println("Minimum cost="+minimum_cost);
        print_stations(last,l1,l2,n);
        //Consider exit times and return minimum
        /*return min(t1[n - 1] + x[0],
                t2[n - 1] + x[1]);
                */
    }

    static void print_stations(int l,int l1[],int l2[],int n) {
        int i = l;
        System.out.println("Line " + i + " " + "Station " + n);
        for (int j = n - 1; j >= 1; j--) {
            if (i == 1) {
                i = l1[j];
                System.out.println("Line " + i + " " + "Station " + j);
            } else {
                i = l2[j];
                System.out.println("Line " + i + " " + "Station " + j);

            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of stations");
        int n = sc.nextInt();
        int a[][] = new int[2][n];
        int t[][] = new int[2][n];
        int e[] = new int[2];
        int x[] = new int[2];
        System.out.println("Enter the cost of stations");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < n; j++) {
                a[i][j] = sc.nextInt();
            }
        }
        System.out.println("Enter the cost of diagonal transition between stations");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < n; j++) {
                t[i][j] = sc.nextInt();
            }
        }
        System.out.println("Enter the cost of entering the stations");
        for(int i=0;i<2;i++)
        {
            e[i]=sc.nextInt();
        }
        System.out.println("Enter the cost of exiting the stations");
        for(int i=0;i<2;i++)
        {
            x[i]=sc.nextInt();
        }
        assembly(a,t,e,x,n);
    }
}
