#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
int x,c=1;
struct node
{

    int data;
    struct  node *next;
}*start=NULL,*start1=NULL,*start2=NULL;

struct node *createnode()
{

struct node *newnode;
newnode=(struct node *)malloc(sizeof(struct node));
newnode->next=NULL;
return newnode;
}
struct node *temp1,*temp2;
void insertNodeAtEnding()
{


        temp1=createnode();
        printf("\nEnter the data\n");
        scanf("%d",&temp1->data);
        if(start==NULL)
        {
            start=temp1;
        }
        else
        {
            temp2=start;
            while(temp2->next!=NULL)
            {
                temp2=temp2->next;

            }
            temp2->next=temp1;//temp1 always stores the address of new node
        }
    }
    void insertAtBeginning()
    {   struct node *temp3;
        temp1=createnode();
        printf("\nEnter the data\n");
        scanf("%d",&temp1->data);
        if(start==NULL)
        {
            start=temp1;
        }
        else{
        temp3=start;
        start=temp1;
        temp1->next=temp3;
        }

    }
    void insertAtMiddle()
    {
        int x;
        struct node *temp3;
        temp1=createnode();
        printf("\nEnter the data\n");
        scanf("%d",&temp1->data);
        printf("\nEnter the position\n");
        scanf("%d",&x);
        if(start==NULL)
        {
            start=temp1;
        }
        else
        {
            temp2=start;
        for(int i=1;i<x-1;i++)
        {
            temp2=temp2->next;
        }
        temp3=temp2->next;
        temp2->next=temp1;
        temp1->next=temp3;
    }
    }
    void deleteAtBeginning()
    {
        struct node *temp3;
        if(start==NULL){
            printf("The linked list is empty!");
        }
        else
            {
                temp2=start;
                if(temp2->next==NULL)
                {
                    start=NULL;
                }
                else
                {
                temp3=temp2->next;
                start=temp3;
            }
            printf("The value that is being deleted=%d",temp2->data);
            free(temp2);
        }
    }
         void deleteAtEnd()
         {
             struct node *temp3;
        if(start==NULL){
            printf("The linked list is empty!");
        }
        else
            {
                temp2=start;
                temp3=start;
                while(temp2->next!=NULL)
                {
                    temp3=temp2;
                    temp2=temp2->next;
                }
                if(temp2==start)
                {
                    start=NULL;
                }
                else
                {
                    temp3->next=NULL;
                }
                printf("The value that is being deleted=%d",temp2->data);
                free(temp2);

         }
         }
         void deleteAtMiddle()
         {
             int p;
             printf("Enter position to delete\n");
             scanf("%d",&p);
             struct node *temp3;
             if(start==NULL){
            printf("The linked list is empty!\n");
        }
        else
            {
                temp2=start;
                for(int i=1;i<p;i++)
                {
                    temp3=temp2;
                    temp2=temp2->next;
                }
                temp3->next=temp2->next;
         }
         printf("The value that is being deleted=%d",temp2->data);
         free(temp2);
         }

    void Traverse()
    {
        if(start==NULL)
        {
            printf("\nThe linked list is empty\n");

        }
        else
        {
        temp2=start;
            printf("\nThe values in Linked List\n");
            while(temp2!=NULL)
            {
                printf("%d ",temp2->data);
                temp2=temp2->next;
            }

    }
    }
    void main()
    {

        do
        {
            printf("\nEnter your choice\n");
            scanf("%d",&x);
            switch(x)
            {
                case 1:{
                insertNodeAtEnding();
                break;
                }


                case 2:{
                insertAtBeginning();
                break;}

                case 3:
                    {
                        insertAtMiddle();
                        break;
                    }
                case 4:
                    {
                        deleteAtBeginning();
                        break;
                    }
                case 5:
                    {
                        deleteAtEnd();
                        break;
                    }
                    case 6:{
                    deleteAtMiddle();
                    break;}
                    case 7:{
                Traverse();
                break;
                }

                case 8:{
                    printf("\nEXIT POINT\n");
                break;
                }
                default:
                {
             printf("\nPlease Enter a Valid Choice\n");
            }
            }
        }while(x!=8);
        }

