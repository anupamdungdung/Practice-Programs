/*
    a[] is the array, p is starting index, that is 0,
    and r is the last index of array.
*/

#include <stdio.h>
#define SIZE 5

int a[SIZE];

// function to merge the subarrays
void merge(int a[], int p, int q, int r)
{
    int b[SIZE];   //same size of a[]
    int i, j, k;
    k = 0;
    i = p;
    j = q + 1;
    while(i <= q && j <= r)
    {
        if(a[i] < a[j])
        {
            b[k++] = a[i++];    // same as b[k]=a[i]; k++; i++;
        }
        else
        {
            b[k++] = a[j++];
        }
    }

    while(i <= q)
    {
        b[k++] = a[i++];
    }

    while(j <= r)
    {
        b[k++] = a[j++];
    }

    for(i=r; i >= p; i--)
    {
        a[i] = b[--k];  // copying back the sorted list to a[]
    }
}
// merge sort function
void mergeSort(int a[], int p, int r)
{
    int q;
    if(p < r)
    {
        q = (p + r) / 2;
        mergeSort(a, p, q);
        mergeSort(a, q+1, r);
        merge(a, p, q, r);
    }
}

// function to print the array
void printArray(int a[], int size)
{
    int i;
    for (i=0; i < size; i++)
    {
        printf("%d ", a[i]);
    }
    printf("\n");
}

int main()
{
    printf("\nEnter the array\n");
    for(int i=0;i<SIZE;i++)
    {
        scanf("%d",&a[i]);
    }
    int len = sizeof(a)/sizeof(a[0]);

    printf("Given array: \n");
    printArray(a, len);

    // calling merge sort
    mergeSort(a, 0, len - 1);

    printf("\nSorted array: \n");
    printArray(a, len);
    return 0;
}
