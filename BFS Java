import java.util.*;

public class BreadthFirstSearch {
    static long start = System.nanoTime();
    private int V;
    private LinkedList<Integer> adj[];

    BreadthFirstSearch(int v)//Create a graph
    {
        V = v;
        adj = new LinkedList[v];
        for (int i = 0; i < v; ++i) {
            adj[i] = new LinkedList<>();
        }
    }
    void addEdge(int v, int w) {
        adj[v].add(w);

    }

    void BFS(int s) {
        boolean visited[] = new boolean[V];
        LinkedList<Integer> queue = new LinkedList<>();
        visited[s] = true;
        queue.add(s);
        while (queue.size() != 0) {
            s = queue.poll();
            System.out.print(s + " ");
            Iterator<Integer> i = adj[s].listIterator();
            while (i.hasNext()) {
                int n = i.next();
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }

    }

    public static void main(String[] args) {
        int n, i;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter no. of edges");
        n = sc.nextInt();
        BreadthFirstSearch g = new BreadthFirstSearch(n);
        int[] pt1 = new int[n];
        int[] pt2 = new int[n];
        System.out.println("Enter edge and points");
        for (i = 0; i < n; i++) {
            pt1[i] = sc.nextInt();
            pt2[i] = sc.nextInt();
            g.addEdge(pt1[i], pt2[i]);
        }
        System.out.println("Following is Breadth First Traversal" + " (starting from vertex 2)");
        g.BFS(2);
        System.out.println();
        long end = System.nanoTime();
        long ep = (end - start);
        System.out.println("Elapsed Time(in ns)=" + ep);
    }
}
